<?php namespace ZN\Helpers;

use ZN\IndividualStructures\Benchmark;

class Tester
{
    //--------------------------------------------------------------------------------------------------------
    //
    // Author     : Ozan UYKUN <ozanbote@gmail.com>
    // Site       : www.znframework.com
    // License    : The MIT License
    // Copyright  : (c) 2012-2016, znframework.com
    //
    //--------------------------------------------------------------------------------------------------------

    //--------------------------------------------------------------------------------------------------------
    // Class
    //--------------------------------------------------------------------------------------------------------
    //
    // @var string
    //
    //--------------------------------------------------------------------------------------------------------
    protected $class;

    //--------------------------------------------------------------------------------------------------------
    // Methods
    //--------------------------------------------------------------------------------------------------------
    //
    // @var array
    //
    //--------------------------------------------------------------------------------------------------------
    protected $methods;

    //--------------------------------------------------------------------------------------------------------
    // Result
    //--------------------------------------------------------------------------------------------------------
    //
    // @var string
    //
    //--------------------------------------------------------------------------------------------------------
    protected $result;

    //--------------------------------------------------------------------------------------------------------
    // Total Elased Time
    //--------------------------------------------------------------------------------------------------------
    //
    // @var numeric
    //
    //--------------------------------------------------------------------------------------------------------
    protected $totalElasedTime;

    //--------------------------------------------------------------------------------------------------------
    // Total Memory Usage
    //--------------------------------------------------------------------------------------------------------
    //
    // @var numeric
    //
    //--------------------------------------------------------------------------------------------------------
    protected $totalMemoryUsage;

    //--------------------------------------------------------------------------------------------------------
    // Total File Count
    //--------------------------------------------------------------------------------------------------------
    //
    // @var numeric
    //
    //--------------------------------------------------------------------------------------------------------
    protected $totalFileCount;

    //--------------------------------------------------------------------------------------------------------
    // Class
    //--------------------------------------------------------------------------------------------------------
    //
    // @param string $class
    //
    //--------------------------------------------------------------------------------------------------------
    public function class(String $class) : Tester
    {
        $this->class = $class;

        return $this;
    }

    //--------------------------------------------------------------------------------------------------------
    // Methods
    //--------------------------------------------------------------------------------------------------------
    //
    // @param array $methods
    //
    //--------------------------------------------------------------------------------------------------------
    public function methods(Array $methods) : Tester
    {
        $this->methods = $methods;

        return $this;
    }

    //--------------------------------------------------------------------------------------------------------
    // Start
    //--------------------------------------------------------------------------------------------------------
    //
    // @param void
    //
    //--------------------------------------------------------------------------------------------------------
    public function start()
    {
        $this->result = NULL;

        $index = 0;

        foreach( $this->methods as $method => $parameters )
        {
            $method = explode(':', $method)[0];

            Benchmark\Testing::start($method);
            $returnValue = uselib($this->class)->$method(...$parameters);
            Benchmark\Testing::end($method);

            $this->_output($this->class, $method, gettype($returnValue), $returnValue);

            $index++;
        }

        $this->_outputBottom($index);
        $this->_startDefaultVariables();
    }

    //--------------------------------------------------------------------------------------------------------
    // Result
    //--------------------------------------------------------------------------------------------------------
    //
    // @param void
    //
    //--------------------------------------------------------------------------------------------------------
    public function result()
    {
        return '<pre>'.$this->result.'</pre>';
    }

    //--------------------------------------------------------------------------------------------------------
    // Protected Output
    //--------------------------------------------------------------------------------------------------------
    //
    // @param string $class
    // @param string $method
    //
    //--------------------------------------------------------------------------------------------------------
    protected function _output($class, $method, $returnType, $returnValue)
    {
        $elapsedTime      = Benchmark\ElapsedTime::calculate($method);
        $calculatedMemory = Benchmark\MemoryUsage::calculate($method);
        $usedFileCount    = Benchmark\FileUsage::count($method);
        $returnType       = ucfirst($returnType);

        $this->totalElasedTime  += $elapsedTime;
        $this->totalMemoryUsage += $calculatedMemory;
        $this->totalFileCount   += $usedFileCount;

        $this->result .= '---------------------------------------------------<br>';
        $this->result .= $class.'::'.$method.'<br>';
        $this->result .= '---------------------------------------------------<br>';
        $this->result .= 'Syntax Check : OK<br>';
        $this->result .= 'Return Type  : '.$returnType.'<br>';
        $this->result .= 'Return Value : '.( is_scalar($returnValue) ? $returnValue : $returnType).'<br>';
        $this->result .= 'Elapsed Time : '.$elapsedTime.' SECONDS<br>';
        $this->result .= '---------------------------------------------------<br><br>';
    }

    //--------------------------------------------------------------------------------------------------------
    // Protected Output Bottom
    //--------------------------------------------------------------------------------------------------------
    //
    // @param void
    //
    //--------------------------------------------------------------------------------------------------------
    protected function _outputBottom($index)
    {
        $this->result .= '---------------------------------------------------<br>';
        $this->result .= 'TOTAL<br>';
        $this->result .= '---------------------------------------------------<br>';
        $this->result .= 'Syntax Check : OK<br>';
        $this->result .= 'Elapsed Time : '.$this->totalElasedTime.' SECONDS<br>';
        $this->result .= 'Memory Usage : '.$this->totalMemoryUsage.' BYTES<br>';
        $this->result .= 'Total Files  : '.$this->totalFileCount.'<br>';
        $this->result .= 'Total Methods: '.$index.'<br>';
        $this->result .= '---------------------------------------------------';

        $this->_defaultVariables();
    }

    //--------------------------------------------------------------------------------------------------------
    // Protected Default Variables
    //--------------------------------------------------------------------------------------------------------
    //
    // @param void
    //
    //--------------------------------------------------------------------------------------------------------
    protected function _defaultVariables()
    {
        $this->totalElasedTime  = NULL;
        $this->totalMemoryUsage = NULL;
        $this->totalFileCount   = NULL;
    }

    //--------------------------------------------------------------------------------------------------------
    // Protected Start Default Variables
    //--------------------------------------------------------------------------------------------------------
    //
    // @param void
    //
    //--------------------------------------------------------------------------------------------------------
    protected function _startDefaultVariables()
    {
        $this->class   = NULL;
        $this->methods = [];
    }
}
